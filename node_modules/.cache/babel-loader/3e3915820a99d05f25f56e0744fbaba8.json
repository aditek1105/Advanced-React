{"ast":null,"code":"var _jsxFileName = \"/Users/aditek/Desktop/react-advanced/src/tutorial/1-useState/setup/2-useState-basics.js\";\nimport React, { useState } from \"react\"; //this useState hook is used to control the state of a component/container,\n//the first parameter is the value that is controlled by the second function,\n//if you need to change the first value, you can do it using the state's function\n//Some common rules for using any form of hooks:\n// 1) The component's name must be in upper case, having a hook in the component\n// that is lower case will not work\n// 2) The hook must be within a function/component body\n// 3) cannot call conditionally (meaning\n\nconst UseStateBasics = () => {\n  // const value = useState(100)[0];\n  // const handler = useState(100)[1];\n  // console.log(value, handler);\n  const [text, setText] = useState(\"Hello World\");\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, text), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => {\n      if (text === \"Hello World\") {\n        return setText(\"New Title\");\n      } else {\n        return setText(\"Hello World\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Change Title\"));\n};\n\nexport default UseStateBasics;","map":{"version":3,"sources":["/Users/aditek/Desktop/react-advanced/src/tutorial/1-useState/setup/2-useState-basics.js"],"names":["React","useState","UseStateBasics","text","setText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,aAAD,CAAhC;AACA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,IAAL,CADF,eAEE;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIA,IAAI,KAAK,aAAb,EAA4B;AAC1B,eAAOC,OAAO,CAAC,WAAD,CAAd;AACD,OAFD,MAEO;AACL,eAAOA,OAAO,CAAC,aAAD,CAAd;AACD;AACF,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAiBD,CAtBD;;AAwBA,eAAeF,cAAf","sourcesContent":["import React, { useState } from \"react\";\n//this useState hook is used to control the state of a component/container,\n//the first parameter is the value that is controlled by the second function,\n//if you need to change the first value, you can do it using the state's function\n\n//Some common rules for using any form of hooks:\n// 1) The component's name must be in upper case, having a hook in the component\n// that is lower case will not work\n// 2) The hook must be within a function/component body\n// 3) cannot call conditionally (meaning\n\nconst UseStateBasics = () => {\n  // const value = useState(100)[0];\n  // const handler = useState(100)[1];\n  // console.log(value, handler);\n  const [text, setText] = useState(\"Hello World\");\n  return (\n    <React.Fragment>\n      <h1>{text}</h1>\n      <button\n        className=\"btn\"\n        onClick={() => {\n          if (text === \"Hello World\") {\n            return setText(\"New Title\");\n          } else {\n            return setText(\"Hello World\");\n          }\n        }}\n      >\n        Change Title\n      </button>\n    </React.Fragment>\n  );\n};\n\nexport default UseStateBasics;\n"]},"metadata":{},"sourceType":"module"}