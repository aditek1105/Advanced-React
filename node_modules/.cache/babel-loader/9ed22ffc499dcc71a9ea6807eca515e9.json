{"ast":null,"code":"var _jsxFileName = \"/Users/aditek/Desktop/react-advanced/src/tutorial/1-useState/setup/4-useState-object.js\";\nimport React, { useState } from \"react\";\n\nconst UseStateObject = () => {\n  const [person, setPerson] = useState({\n    name: \"Peter\",\n    age: 24,\n    message: \"Hey there!\"\n  });\n\n  const changeMessage = () => {\n    // setPerson(\"New!\");\n    // setPerson({message:\"New!\"})\n    if (setPerson.message === \"Hey there!\") {\n      setPerson({ ...person,\n        message: \"Hello Peter!\"\n      });\n    }\n\n    {// by setting the setPerson(\"New!\") you are essentially just wiping out the entire object,\n      // a better fix would be to do this setPerson({message: \"New!\"}), but this would also essentially just change the message\n      // and the old values such as the name and the age will be wiped off, to keep them we use the spread operator\n      // like this setPerson({...person, message:\"new!\"}), this will essentially keep the old values and then change the message of the object\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, person.name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, person.age), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, person.message), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => changeMessage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, \"Change message\"));\n};\n\nexport default UseStateObject;","map":{"version":3,"sources":["/Users/aditek/Desktop/react-advanced/src/tutorial/1-useState/setup/4-useState-object.js"],"names":["React","useState","UseStateObject","person","setPerson","name","age","message","changeMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC;AACnCI,IAAAA,IAAI,EAAE,OAD6B;AAEnCC,IAAAA,GAAG,EAAE,EAF8B;AAGnCC,IAAAA,OAAO,EAAE;AAH0B,GAAD,CAApC;;AAKA,QAAMC,aAAa,GAAG,MAAM;AAC1B;AACA;AACA,QAAIJ,SAAS,CAACG,OAAV,KAAsB,YAA1B,EAAwC;AACtCH,MAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaI,QAAAA,OAAO,EAAE;AAAtB,OAAD,CAAT;AACD;;AACD,KACE;AACA;AACA;AACA;AACD;AACF,GAZD;;AAaA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,MAAM,CAACE,IAAZ,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,MAAM,CAACG,GAAZ,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,MAAM,CAACI,OAAZ,CAHF,eAIE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAE,MAAMC,aAAa,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADF;AAUD,CA7BD;;AA+BA,eAAeN,cAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst UseStateObject = () => {\n  const [person, setPerson] = useState({\n    name: \"Peter\",\n    age: 24,\n    message: \"Hey there!\",\n  });\n  const changeMessage = () => {\n    // setPerson(\"New!\");\n    // setPerson({message:\"New!\"})\n    if (setPerson.message === \"Hey there!\") {\n      setPerson({ ...person, message: \"Hello Peter!\" });\n    }\n    {\n      // by setting the setPerson(\"New!\") you are essentially just wiping out the entire object,\n      // a better fix would be to do this setPerson({message: \"New!\"}), but this would also essentially just change the message\n      // and the old values such as the name and the age will be wiped off, to keep them we use the spread operator\n      // like this setPerson({...person, message:\"new!\"}), this will essentially keep the old values and then change the message of the object\n    }\n  };\n  return (\n    <React.Fragment>\n      <h3>{person.name}</h3>\n      <h3>{person.age}</h3>\n      <h3>{person.message}</h3>\n      <button className=\"btn\" onClick={() => changeMessage()}>\n        Change message\n      </button>\n    </React.Fragment>\n  );\n};\n\nexport default UseStateObject;\n"]},"metadata":{},"sourceType":"module"}